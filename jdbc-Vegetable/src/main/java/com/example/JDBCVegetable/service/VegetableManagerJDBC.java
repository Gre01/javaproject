package com.example.JDBCVegetable.service;

import com.example.JDBCVegetable.domain.Vegetable;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class VegetableManagerJDBC implements VegetableManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableVegetable = "CREATE TABLE Vegetable(id bigint GENERATED BY DEFAULT AS IDENTITY, Name varchar(50) unique, Descr varchar(500), Price double, Color varchar(20))";

	private PreparedStatement addVegetableStmt;
	private PreparedStatement deleteAllVegetablesStmt;
	private PreparedStatement getAllVegetablesStmt;
	private PreparedStatement removeVegetableStmt;

	private Statement statement;

	public VegetableManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Vegetable".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists) statement.executeUpdate(createTableVegetable);

			addVegetableStmt = connection.prepareStatement("INSERT INTO Vegetable (Name, Descr, Price, Color) VALUES (?, ?, ?, ?)");
			deleteAllVegetablesStmt = connection.prepareStatement("DELETE FROM Vegetable");
			getAllVegetablesStmt = connection.prepareStatement("SELECT id, Name, Descr, Price, Color FROM Vegetable");
			removeVegetableStmt = connection.prepareStatement("DELETE FROM Vegetable WHERE Name=?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearVegetables() {
		try {
			deleteAllVegetablesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addVegetable(Vegetable VG) {
		int count = 0;
		try {
			addVegetableStmt.setString(1, VG.getName());
			addVegetableStmt.setString(2, VG.getDescr());
			addVegetableStmt.setDouble(3, VG.getPrice());
			addVegetableStmt.setString(4, VG.getColor());

			count = addVegetableStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public void removeVegetable(String VG) {
		try {
			removeVegetableStmt.setString(1, VG);
			removeVegetableStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void removeSelectedVegetable(List<Vegetable> list) {
		try {
			connection.setAutoCommit(false);
			for (Vegetable VG : list) {
				removeVegetableStmt.setString(1, VG.getName());
				removeVegetableStmt.executeUpdate();
			}
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
	}

	@Override
	public void addAllVegetables(List<Vegetable> list) {
		try {
			connection.setAutoCommit(false);
			for (Vegetable VG : list) {
				addVegetableStmt.setString(1, VG.getName());
				addVegetableStmt.setString(2, VG.getDescr());
				addVegetableStmt.setDouble(3, VG.getPrice());
				addVegetableStmt.setString(4, VG.getColor());
				addVegetableStmt.executeUpdate();
			}
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
	}

	@Override
	public List<Vegetable> getAllVegetables() {
		List<Vegetable> VG_List = new ArrayList<Vegetable>();

		try {
			ResultSet rs = getAllVegetablesStmt.executeQuery();

			while (rs.next()) {
				Vegetable read_VG = new Vegetable();
				read_VG.setId(rs.getInt("id"));
				read_VG.setName(rs.getString("Name"));
				read_VG.setDescr(rs.getString("Descr"));
				read_VG.setPrice(rs.getDouble("Price"));
				read_VG.setColor(rs.getString("Color"));
				VG_List.add(read_VG);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return VG_List;
	}

}
